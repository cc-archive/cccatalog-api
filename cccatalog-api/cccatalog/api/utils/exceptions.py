from rest_framework import status
from rest_framework.response import Response
"""
Override the presentation of ValidationErrors, which are deeply nested and
difficult to parse.

Note that error 500 pages are not handled here; they are generated by the
production web server configuration, and not reproducible locally.
"""


def parse_value_errors(errors):
    fields = ['q']
    messages = [errors.args[0].info['error']['root_cause'][0]['reason']]
    return fields, messages


def parse_non_value_errors(errors):
    fields = [f for f in errors]
    messages = []
    for _field in errors:
        error = errors[_field]
        for e in error:
            messages.append(e)

    # Don't return "non field errors" in deprecation exceptions. There is no
    # other way to recover the affected fields other than parsing the error.
    if fields == ['non_field_errors']:
        split_error = list(messages)
        field_idx = ' '.join(messages).index('Parameter') + 1
        fields = [split_error[field_idx].replace("'", '')][0]

    return fields, messages


def input_error_response(errors):
    if isinstance(errors, ValueError):
        fields, messages = parse_value_errors(errors)
    else:
        fields, messages = parse_non_value_errors(errors)

    detail = "Invalid input given for fields."
    for i, _ in enumerate(fields):
        detail += f" '{fields[i]}' -> {messages[i]}"

    return Response(
        status=status.HTTP_400_BAD_REQUEST,
        data={
            'error': 'InputError',
            'detail': detail,
            'fields': fields
        }
    )
